{"name":"DCPU-Bas","body":"# DCPU-Bas - 0xBASIC language for DCPU-16\r\n\r\nDCPU-Bas is a simple QuickBASIC-like compiler for virtual DCPU in Notch's [0x10c Game](http://www.0x10c.com),  \r\nwritten in [Go language](http://golang.org).  \r\nCompiler structure and engine is heavily inspired by [Let's Build a Compiler, by Jack Crenshaw](http://compilers.iecc.com/crenshaw/).\r\n\r\n## Features\r\n\r\n* Arithmetics: + - * / %\r\n* Boolean operators: & ~ !\r\n* Bit shifts: << >>\r\n* Relational operators: == <> < > <= >=\r\n* Control structures: IF, LOOP\r\n* Variables (both integer and string)\r\n* Statements: CLS, LOCATE, PRINT, COLOR, KEY, INPUT, POKE\r\n* Functions: STR, CHR, PEEK\r\n\r\n## How to get it.\r\n\r\nEasiest way is to get the binaries from the [downloads section](https://github.com/M4v3R/DCPU-Bas/downloads).  \r\nYou can also build it from the latest sources. In that case, you need to:\r\n\r\n* Get and setup [Go](http://golang.org/doc/install)\r\n* Get the [latest sources](https://github.com/M4v3R/DCPU-Bas/zipball/master) and unpack them to a directory\r\n* On the command line, within that directory, type: ```go build```\r\n\r\nThat should do it.\r\n\r\n## Language documentation\r\n\r\nBelow are language statements and functions explained:\r\n\r\n### IF\r\n\r\nUsage:\r\n\r\n```\r\nIF condition THEN\r\n\t...\r\n[ELSE\r\n\t...]\r\nEND IF\r\n```\r\n\r\nExecutes a code block if _condition_ is met. Optional ELSE block executed if _condition_ is NOT met.\r\n\r\n### LOOP\r\n\r\nUsage:\r\n\r\n```\r\nLOOP [WHILE condition]\r\n\t...\r\nEND WHILE\r\n```\r\n\r\nLoops through a code block. Whe _condition_ is supplied, loops while the _condition_ is met.\r\n\r\n### CLS\r\n\r\nUsage:\r\n\r\n```\r\nCLS\r\n```\r\n\r\nClears whole 32x16 screen (video buffer at 0x8000)\r\n\r\n### PRINT\r\n\r\nUsage:\r\n\r\n```\r\nPRINT expression [; expression][; CONTINUE]\r\nPRINT\r\n```\r\n\r\nPrints _expression(s)_ at current screen cursor location. Multiple expressions can be joined with semi-colon (;).  \r\nAfter printing all expressions cursor position will be set to next row, column 1, unless CONTINUE keyword is given at the end of expression list.  \r\nExample:\r\n\r\n```\r\nA = \"World\"\r\nPRINT \"Hello \"; A\r\nPRINT \"A sentence within \"; CONTINUE\r\nPRINT \"the same line.\"\r\n```\r\n\r\n### PUTCHAR\r\n\r\nUsage:\r\n\r\n```\r\nPUTCHAR \"c\"\r\nPUTCHAR expression\r\n```\r\n\r\nFast way (5x faster than PRINT \"c\") to output a single character to video buffer at current cursor position. It can be either a string literal _c_\r\nin double quotes, or a math expression (which could be a single number) returning character ascii code.\r\n\r\n### LOCATE\r\n\r\nUsage:\r\n\r\n```\r\nLOCATE Y[, X]\r\n```\r\n\r\nSets current cursor location to _X_, _Y_. Set's only _Y_ if _X_ is not provided.\r\n\r\n### COLOR\r\n\r\nUsage:\r\n\r\n```\r\nCOLOR FOREGROUND, BACKGROUND\r\n```\r\n\r\nSets current output color to _FOREGROUND_ and _BACKGROUND_. Both these values can be 0 to 15.\r\n\r\n### KEY\r\n\r\nUsage:\r\n\r\n```\r\nDIM Code\r\nCode = KEY \r\n```\r\n\r\nUsed in an expression, it returns character code of last pressed key.\r\n\r\n### STR\r\n\r\nUsage:\r\n\r\n```\r\nDIM Char\r\nChar = STR(expression)\r\n```\r\n\r\nReturns an ASCII character from given character code.\r\n\r\n### CHR\r\n\r\nUsage:\r\n\r\n```\r\nDIM Code\r\nCode = STR(expression)\r\n```\r\n\r\nReturns a character code from first character of an ASCII string (opposite to STR)\r\n\r\n### INPUT\r\n\r\nUsage:\r\n\r\n```\r\nDIM YourName\r\nYourName = INPUT\r\n```\r\n\r\nWaits for user to enter a string followed by ENTER key, and returns this string as expression. User input is displayed on the screen.\r\n\r\n### PEEK\r\n\r\nUsage:\r\n\r\n```\r\nDIM MemoryValue\r\nMemoryValue = PEEK(address)\r\n```\r\n\r\nReads directly the memory and returns a number representing word at given memory _address_.\r\n\r\n### POKE\r\n\r\nUsage:\r\n\r\n```\r\nPOKE address, value\r\n```\r\n\r\nWrites directly to memory, sets word at _address_ to given _value_.\r\n\r\n### END\r\n\r\nProgram MUST end with an ```END``` statement.\r\n\r\n## Demos\r\n\r\nYou can browse sample/ directory for sample .bas source files, as well as output/ directory for compiled .s (assembly) files of these samples. There are couple of web-based emulators that you can try these with, most notable: [deNULL's](http://denull.ru/dcpu/dcpu.htm).\r\n\r\n## Licence\r\n\r\nThis code is licenced on the terms of the [MIT Licence](http://www.opensource.org/licenses/mit-license.php).","tagline":"QuickBasic-like compiler for DCPU in 0x10c game","google":"UA-30762132-1","note":"Don't delete this file! It's used internally to help with page regeneration."}